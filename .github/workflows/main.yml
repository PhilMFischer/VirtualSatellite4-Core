# --------------------------------------------
# This is a basic workflow to help you get started with Actions
# --------------------------------------------
name: Build

on:
  # --------------------------------------------
  # Controls when the automatic build job will be run.
  # By default uses the default branch. Runs at 03:00 UTC.
  # --------------------------------------------
  schedule:
    - cron: '0 3 * * *'
      
  # --------------------------------------------
  # Run this workflow every time a new commit pushed to the repository
  # --------------------------------------------
  push:
  
  # --------------------------------------------
  # Run this workflow every time a pull request is created or commited to it
  # --------------------------------------------
  pull_request:
    branches:
      - '**'

env:
  # -------------------------------------------------------------
  # Setting up locale to have correct keyboard mapping for swtbot
  # -------------------------------------------------------------
  LANG: "en_US.UTF-8"
# --------------------------------------------
# Defines the list of jobs
# --------------------------------------------
jobs:
 


  # -----------------------------------------------------
  # Build and Test - Checkstyle Job
  # -----------------------------------------------------
  checkstyle:
    name: Build and Test - Checkstyle
    runs-on: ubuntu-18.04

    steps:
      # --------------------------------------------
      # Checks out a copy of your repository
      # --------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v2
      
      # --------------------------------------------
      # Setup caching for m2 repository
      # --------------------------------------------      
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/
          key: ${{ runner.os }}-local-maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-local-maven-checkstyle-
            ${{ runner.os }}-local-maven-
            
      # --------------------------------------------
      # Perform various setup operations
      # --------------------------------------------      
      - name: Build - Setup
        uses: virtualsatellite/ci-actions/ci-setup-action@master

      # --------------------------------------------
      # Development and Feature branches
      # --------------------------------------------
      - name: Build - Build and Deploy Decision
        id: build_decision
        uses: virtualsatellite/ci-actions/ci-build-decision-action@master

      # --------------------------------------------
      # Development and Feature branches
      # --------------------------------------------
      - name: Build and Test - Checkstyle
        uses: virtualsatellite/ci-actions/ci-maven-build-action@master
        with:
          build_job: checkstyle
          build_profile: ${{ steps.build_decision.outputs.build_type }}

  # -----------------------------------------------------
  # Build, Assemble and Deploy Job
  # -----------------------------------------------------
  deploy:
    name: Build, Assemble and Deploy
    runs-on: ubuntu-18.04
    needs: [checkstyle]
    
    steps:
      # --------------------------------------------
      # Checks out a copy of your repository
      # --------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v2

      # --------------------------------------------
      # Setup caching for m2 repository
      # --------------------------------------------
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/
          key: ${{ runner.os }}-local-maven-deploy-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-local-maven-deploy-
            ${{ runner.os }}-local-maven-

      # --------------------------------------------
      # Perform various setup operations
      # --------------------------------------------
      - name: Build - Setup
        uses: virtualsatellite/ci-actions/ci-setup-action@master

     

      # --------------------------------------------
      # Create a tag on the Development branch
      # --------------------------------------------
      - name: Create Development Tag
        run: |
         git tag -f development_snapshot
         git remote add github-mtd https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
         git push -f github-mtd development_snapshot
         git remote remove github-mtd
        if: ${{ github.ref == 'refs/heads/development'  }}

      # --------------------------------------------
      # Create a tag on the Integration branch
      # --------------------------------------------
      - name: Create Integration Tag
        run: |
         git tag -f integration_snapshot
         git remote add github-mtd https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
         git push -f github-mtd integration_snapshot
         git remote remove github-mtd
        if: ${{ github.ref == 'refs/heads/integration'  }}

      # --------------------------------------------
      # Create a new development release and delete the old one
      # --------------------------------------------
      - name: Deploy - Development
        if: ${{ github.ref == 'refs/heads/development'  }}
        env:
          openssl_pass: ${{ secrets.SF_SSH_KEY_OPENSSL_PASS }}
          ssh_key_pass: ${{ secrets.SF_SSH_KEY_PASS }}         
        run: |
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c delete -r development_snapshot
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c create -r development_snapshot -d "Development build on latest commit by Github Actions CI - ${{ github.ref }} (${{ github.sha }}) - $(date +'%F %T %Z'). This release is subject to constant change."
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r development_snapshot -p "*.zip" -dir deploy/unsecured
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r development_snapshot -p "*.tar.gz" -dir deploy/unsecured
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r development_snapshot -p "*.pdf" -dir de.dlr.sc.virsat.docs.feature/docs
           ./bash/deploy_sourceforge.sh -s -u development

      # --------------------------------------------
      # Create a new integration release and delete the old one
      # --------------------------------------------
      - name: Deploy - Integration
        if: ${{ github.ref == 'refs/heads/integration'  }}
        env:
          openssl_pass: ${{ secrets.SF_SSH_KEY_OPENSSL_PASS }}
          ssh_key_pass: ${{ secrets.SF_SSH_KEY_PASS }}   
        run: |
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c delete -r integration_snapshot
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c create -r integration_snapshot -d "Integration build on latest commit by Github Actions CI - ${{ github.ref }} (${{ github.sha }}) - $(date +'%F %T %Z'). This release is subject to constant change." 
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r integration_snapshot -p "*.zip" -dir deploy/unsecured
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r integration_snapshot -p "*.tar.gz" -dir deploy/unsecured
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r integration_snapshot -p "*.pdf" -dir de.dlr.sc.virsat.docs.feature/docs   
           ./bash/deploy_sourceforge.sh -s -u integration

      # --------------------------------------------
      # Fill a manually created Release with the build artifacts and description info
      # --------------------------------------------
      - name: Deploy - Release
        if: ${{ (contains(github.ref, 'refs/tags/') && contains(github.ref, 'Release'))  }}
        env:
          openssl_pass: ${{ secrets.SF_SSH_KEY_OPENSSL_PASS }}
          ssh_key_pass: ${{ secrets.SF_SSH_KEY_PASS }}
          github.sha: ${{ github.sha }}
        run: |
           TAG_NAME=${GITHUB_REF#refs/*/}
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c patch -r $TAG_NAME -d "Release build on latest commit by Github Actions CI - ${{ github.ref }} (${{ github.sha }}) - $(date +'%F %T %Z'). This is a stable release."  
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r $TAG_NAME -p "*.zip" -dir deploy/secured
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r $TAG_NAME -p "*.tar.gz" -dir deploy/secured
           ./bash/github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r $TAG_NAME -p "*.pdf" -dir de.dlr.sc.virsat.docs.feature/docs
           ./bash/deploy_sourceforge.sh -s -u release
