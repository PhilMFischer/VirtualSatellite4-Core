/*******************************************************************************
 * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
 /*
 * generated by Xtext
 */
package de.dlr.sc.virsat.model.concept.validation

import de.dlr.sc.virsat.model.dvlm.categories.CategoriesPackage
import de.dlr.sc.virsat.model.dvlm.categories.Category
import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.AProperty
import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IIntrinsicTypeProperty
import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsPackage
import de.dlr.sc.virsat.model.dvlm.concepts.Concept
import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsPackage
import org.eclipse.xtext.validation.Check

/**
 * Class for simple checks that don't require special environment setup.
 * Unit tests code uses this validator
 */
class ConceptLanguageValidator extends AbstractConceptLanguageValidator {

	public static val DUPLICATE_PROPERTY_NAME = 'duplicatePropertyName'
	public static val DUPLICATE_CATEGORY_NAME = 'duplicateCategoryName'
	public static val DEFAULT_VALUE_ON_ARRAY_INFO = 'defaultValueForArrayInfo'

	@Check
	def CheckDuplicateNameInScope(Concept concept) {
		var categories = concept.categories
		var categoryNames = newArrayList
				
		for (category : categories) {
			var categoryName = category.name;
			if (categoryNames.contains(categoryName)) {
				warning('Concept cannot have Categories with equal name! See: ' + categoryName, 
					ConceptsPackage.Literals.CONCEPT__CATEGORIES,
					DUPLICATE_CATEGORY_NAME)
			} else {
				categoryNames.add(categoryName);
			}	
		}
	}

	@Check
	def CheckDuplicateNameInScope(Category category) {
		
		var properties = category.allProperties;
		var propertyNames = newArrayList
				
		for (property : properties) {
			var propertyName = property.name;
			if (propertyNames.contains(propertyName)) {
				warning('Categories cannot have Properties with equal name! See: ' + propertyName, 
					CategoriesPackage.Literals.CATEGORY__PROPERTIES,
					DUPLICATE_PROPERTY_NAME)
			} else {
				propertyNames.add(propertyName);
			}	
		}
	}

	@Check
	def InfoOnDefaultValueForArrayProperties(AProperty property) {
		if (property instanceof IIntrinsicTypeProperty) {
			if (property.arrayModifier !== null && property.defaultValue !== null) {
				info('The default value will be applied to all array elements',
					PropertydefinitionsPackage.Literals.IINTRINSIC_TYPE_PROPERTY__DEFAULT_VALUE,
					DEFAULT_VALUE_ON_ARRAY_INFO
				)
			}
		}
	}
}
