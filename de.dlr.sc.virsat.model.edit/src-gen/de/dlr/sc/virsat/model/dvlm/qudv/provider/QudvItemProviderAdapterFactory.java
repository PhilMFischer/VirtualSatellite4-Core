/*******************************************************************************
 * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
package de.dlr.sc.virsat.model.dvlm.qudv.provider;

import de.dlr.sc.virsat.model.dvlm.qudv.util.QudvAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QudvItemProviderAdapterFactory extends QudvAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QudvItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.UnitFactor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitFactorItemProvider unitFactorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.UnitFactor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitFactorAdapter() {
		if (unitFactorItemProvider == null) {
			unitFactorItemProvider = new UnitFactorItemProvider(this);
		}

		return unitFactorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.LinearConversionUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinearConversionUnitItemProvider linearConversionUnitItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.LinearConversionUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinearConversionUnitAdapter() {
		if (linearConversionUnitItemProvider == null) {
			linearConversionUnitItemProvider = new LinearConversionUnitItemProvider(this);
		}

		return linearConversionUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.AffineConversionUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AffineConversionUnitItemProvider affineConversionUnitItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.AffineConversionUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAffineConversionUnitAdapter() {
		if (affineConversionUnitItemProvider == null) {
			affineConversionUnitItemProvider = new AffineConversionUnitItemProvider(this);
		}

		return affineConversionUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.PrefixedUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixedUnitItemProvider prefixedUnitItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.PrefixedUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixedUnitAdapter() {
		if (prefixedUnitItemProvider == null) {
			prefixedUnitItemProvider = new PrefixedUnitItemProvider(this);
		}

		return prefixedUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.SimpleUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleUnitItemProvider simpleUnitItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.SimpleUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleUnitAdapter() {
		if (simpleUnitItemProvider == null) {
			simpleUnitItemProvider = new SimpleUnitItemProvider(this);
		}

		return simpleUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.DerivedUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DerivedUnitItemProvider derivedUnitItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.DerivedUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDerivedUnitAdapter() {
		if (derivedUnitItemProvider == null) {
			derivedUnitItemProvider = new DerivedUnitItemProvider(this);
		}

		return derivedUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.Prefix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixItemProvider prefixItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.Prefix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixAdapter() {
		if (prefixItemProvider == null) {
			prefixItemProvider = new PrefixItemProvider(this);
		}

		return prefixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.QuantityKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantityKindItemProvider quantityKindItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.QuantityKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantityKindAdapter() {
		if (quantityKindItemProvider == null) {
			quantityKindItemProvider = new QuantityKindItemProvider(this);
		}

		return quantityKindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.SimpleQuantityKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleQuantityKindItemProvider simpleQuantityKindItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.SimpleQuantityKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleQuantityKindAdapter() {
		if (simpleQuantityKindItemProvider == null) {
			simpleQuantityKindItemProvider = new SimpleQuantityKindItemProvider(this);
		}

		return simpleQuantityKindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.DerivedQuantityKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DerivedQuantityKindItemProvider derivedQuantityKindItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.DerivedQuantityKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDerivedQuantityKindAdapter() {
		if (derivedQuantityKindItemProvider == null) {
			derivedQuantityKindItemProvider = new DerivedQuantityKindItemProvider(this);
		}

		return derivedQuantityKindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.SystemOfUnits} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemOfUnitsItemProvider systemOfUnitsItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.SystemOfUnits}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemOfUnitsAdapter() {
		if (systemOfUnitsItemProvider == null) {
			systemOfUnitsItemProvider = new SystemOfUnitsItemProvider(this);
		}

		return systemOfUnitsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.SystemOfQuantities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemOfQuantitiesItemProvider systemOfQuantitiesItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.SystemOfQuantities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemOfQuantitiesAdapter() {
		if (systemOfQuantitiesItemProvider == null) {
			systemOfQuantitiesItemProvider = new SystemOfQuantitiesItemProvider(this);
		}

		return systemOfQuantitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.Dimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionItemProvider dimensionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.Dimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionAdapter() {
		if (dimensionItemProvider == null) {
			dimensionItemProvider = new DimensionItemProvider(this);
		}

		return dimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.DimensionFactor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionFactorItemProvider dimensionFactorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.DimensionFactor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionFactorAdapter() {
		if (dimensionFactorItemProvider == null) {
			dimensionFactorItemProvider = new DimensionFactorItemProvider(this);
		}

		return dimensionFactorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.qudv.QuantityKindFactor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantityKindFactorItemProvider quantityKindFactorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.qudv.QuantityKindFactor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantityKindFactorAdapter() {
		if (quantityKindFactorItemProvider == null) {
			quantityKindFactorItemProvider = new QuantityKindFactorItemProvider(this);
		}

		return quantityKindFactorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (unitFactorItemProvider != null) unitFactorItemProvider.dispose();
		if (linearConversionUnitItemProvider != null) linearConversionUnitItemProvider.dispose();
		if (affineConversionUnitItemProvider != null) affineConversionUnitItemProvider.dispose();
		if (prefixedUnitItemProvider != null) prefixedUnitItemProvider.dispose();
		if (simpleUnitItemProvider != null) simpleUnitItemProvider.dispose();
		if (derivedUnitItemProvider != null) derivedUnitItemProvider.dispose();
		if (prefixItemProvider != null) prefixItemProvider.dispose();
		if (quantityKindItemProvider != null) quantityKindItemProvider.dispose();
		if (simpleQuantityKindItemProvider != null) simpleQuantityKindItemProvider.dispose();
		if (derivedQuantityKindItemProvider != null) derivedQuantityKindItemProvider.dispose();
		if (systemOfUnitsItemProvider != null) systemOfUnitsItemProvider.dispose();
		if (systemOfQuantitiesItemProvider != null) systemOfQuantitiesItemProvider.dispose();
		if (dimensionItemProvider != null) dimensionItemProvider.dispose();
		if (dimensionFactorItemProvider != null) dimensionFactorItemProvider.dispose();
		if (quantityKindFactorItemProvider != null) quantityKindFactorItemProvider.dispose();
	}

}
